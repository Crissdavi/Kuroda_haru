import fs from 'fs';
import path from 'path';

const haremsFile = path.resolve('src/database/harems.json');
let harems = loadHarems();
// Almacenar solicitudes de eliminación pendientes
const pendingDeletions = new Map();

function loadHarems() {
  try {
    return fs.existsSync(haremsFile) ? JSON.parse(fs.readFileSync(haremsFile, 'utf8')) : {};
  } catch (error) {
    console.error('Error loading harems:', error);
    return {};
  }
}

function saveHarems() {
  try {
    fs.writeFileSync(haremsFile, JSON.stringify(harems, null, 2));
  } catch (error) {
    console.error('Error saving harems:', error);
  }
}

const handler = async (m, { conn }) => {
  const usuario = m.sender;
  const texto = m.text.toLowerCase().trim();
  
  // Cargar datos frescos
  harems = loadHarems();

  // Verificar si hay una confirmación pendiente
  if (pendingDeletions.has(usuario)) {
    if (texto === 'confirmar') {
      // CONFIRMAR eliminación
      const haremInfo = pendingDeletions.get(usuario);
      delete harems[usuario];
      saveHarems();
      pendingDeletions.delete(usuario);
      
      return await conn.reply(m.chat, 
        `🗑️ *HAREM ELIMINADO*\n\n✧ Tu harem ha sido eliminado permanentemente.\n✧ Miembros liberados: ${haremInfo.miembrosCount}\n\n✅ Ya no eres maestro de ningún harem.`,
        m
      );
    }
    else if (texto === 'negar') {
      // NEGAR eliminación
      pendingDeletions.delete(usuario);
      return await conn.reply(m.chat, '❌ Eliminación cancelada. Tu harem sigue activo.', m);
    }
    else {
      // Mensaje recordatorio
      return await conn.reply(m.chat, 
        `⚠️ *ESPERANDO CONFIRMACIÓN*\n\n¿Quieres eliminar tu harem?\n✧ *Miembros afectados:* ${pendingDeletions.get(usuario).miembrosCount}\n\nEscribe *confirmar* para eliminar o *negar* para cancelar.`,
        m
      );
    }
  }

  // Verificar si el usuario tiene un harem
  if (!harems[usuario]) {
    return await conn.reply(m.chat, '✧ No tienes un harem para eliminar.', m);
  }

  // Verificar que sea el maestro del harem
  if (harems[usuario].maestro !== usuario) {
    return await conn.reply(m.chat, '✧ Solo el maestro del harem puede eliminarlo.', m);
  }

  // Guardar solicitud de eliminación pendiente
  const miembrosCount = harems[usuario].miembros.length;
  pendingDeletions.set(usuario, {
    timestamp: Date.now(),
    miembrosCount: miembrosCount
  });

  // Limpiar solicitudes antiguas (mayores a 5 minutos)
  const now = Date.now();
  for (const [user, data] of pendingDeletions.entries()) {
    if (now - data.timestamp > 5 * 60 * 1000) { // 5 minutos
      pendingDeletions.delete(user);
    }
  }

  await conn.reply(m.chat, 
    `⚠️ *CONFIRMACIÓN REQUERIDA*\n\n¿Estás seguro de que quieres eliminar tu harem?\n✧ *Miembros afectados:* ${miembrosCount}\n\nEscribe *confirmar* para proceder o *negar* para cancelar.`,
    m
  );
};

handler.tags = ['harem'];
handler.help = ['eliminarharem'];
handler.command = ['eliminarharem'];

export default handler;